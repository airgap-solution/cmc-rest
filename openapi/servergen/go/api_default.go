// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CoinMarketCap Rest
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

package cmcrest

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"V1RateCurrencyFiatGet": Route{
			"V1RateCurrencyFiatGet",
			strings.ToUpper("Get"),
			"/v1/rate/{currency}/{fiat}",
			c.V1RateCurrencyFiatGet,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DefaultAPIController
func (c *DefaultAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"V1RateCurrencyFiatGet",
			strings.ToUpper("Get"),
			"/v1/rate/{currency}/{fiat}",
			c.V1RateCurrencyFiatGet,
		},
	}
}



// V1RateCurrencyFiatGet - Get crypto to fiat rate
func (c *DefaultAPIController) V1RateCurrencyFiatGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	currencyParam := params["currency"]
	if currencyParam == "" {
		c.errorHandler(w, r, &RequiredError{"currency"}, nil)
		return
	}
	fiatParam := params["fiat"]
	if fiatParam == "" {
		c.errorHandler(w, r, &RequiredError{"fiat"}, nil)
		return
	}
	result, err := c.service.V1RateCurrencyFiatGet(r.Context(), currencyParam, fiatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
